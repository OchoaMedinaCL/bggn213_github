---
title: "Lab8_CLOM"
format: pdf
---
```{r}
#library()
```

```{r}
# Save your input data file into your Project directory
fna.data <- read.csv("~/Desktop/Winter_2025/Bioinformatics/WisconsinCancer.csv")

# Complete the following code to input the data and store as wisc.df
wisc.df <- data.frame(fna.data, row.names=1)

# We can use -1 here to remove the first column
wisc.data <- wisc.df[,-1]

```

```{r}
# setup a separate new vector called diagnosis that contains the data from the diagnosis column of the original dataset. We will store this as a factor (useful for plotting) and use this later to check our results.

# Create a factor vector 'diagnosis' from the 'diagnosis' column of the original dataset
diagnosis <- factor(wisc.df$diagnosis)

# Check the structure of the diagnosis vector
str(diagnosis)
```

Q1. How many observations are in this dataset?
```{r}
observations <- nrow(wisc.data)
cat("there are a total of", observations, "observations")
```

Q2. How many of the observations have a malignant diagnosis?
```{r}

M <- sum(diagnosis == "M")
cat(M, "of the", observations, "observations are malignant.")

```

Q3. How many variables/features in the data are suffixed with _mean?
```{r}
# Count columns that end with "_mean"
mean_count <- sum(grepl("_mean$", colnames(wisc.data)))  
cat(mean_count, "variables/features in the data are suffixed with '_mean'. \n")
```
```{r}
# Check column means and standard deviations
colMeans(wisc.data)

apply(wisc.data,2,sd)
```
```{r}
# Perform PCA on wisc.data by completing the following code
wisc.pr <- prcomp(wisc.data)
# Look at summary of results
summary(wisc.pr)
```
Q4. From your results, what proportion of the original variance is captured by the first principal components (PC1)?

>Ans: 0.982

```{r}
# Total variance (sum of squared standard deviations)
total_variance <- sum(wisc.pr$sdev^2)
total_variance

# Variance explained by PC1 (first principal component)
pc1_variance <- wisc.pr$sdev[1]^2
pc1_variance

# Proportion of variance captured by PC1
pc1_proportion <- pc1_variance / total_variance

# Print the proportion of variance captured by PC1
print(pc1_proportion)

```

Q5. How many principal components (PCs) are required to describe at least 70% of the original variance in the data?
>Ans: 1

```{r}
#pca <- PCA(wisc.data,scale.unit = TRUE, graph = TRUE)
# Calculate cumulative variance explained by each PC
cumu_variance <- cumsum(wisc.pr$sdev^2) / total_variance
cumu_variance

# Find the number of PCs required to explain at least 70% of variance
num_pcs_70 <- which(cumu_variance >= 0.70)[1]
print(num_pcs_70)
```

#Q6. How many principal components (PCs) are required to describe at least 90% of the original variance in the data?
>Ans: 1

```{r}
 #Find the number of PCs required to explain at least 90% of variance
num_pcs_90 <- which(cumu_variance >= 0.90)[1]
print(num_pcs_90)
```
```{r}
biplot(wisc.pr)
```

Q7. What stands out to you about this plot? Is it easy or difficult to understand? Why?
>Ans: it is difficult to interpret given that it is comparing many variables. 

```{r}
# Scatter plot of PC1 vs PC2, colored by diagnosis
plot(wisc.pr$x[,1], wisc.pr$x[,2], col = diagnosis,
     xlab = "PC1", ylab = "PC2", 
     main = "Scatter plot of PC1 vs PC2")
```

```{r}

# Scatter plot observations by components 1 and 2
plot(wisc.pr$x[,1], wisc.pr$x[,2], xlab="PC1", ylab="PC2",
      main = "PCA Plot: PC1 vs PC2", col = diagnosis)

#plot(pca$x[,1], pca$x[,2], xlab="PC1", ylab="PC2", xlim=c(-270,500),
 #     main="PCA Plot: PC1 vs PC2", pch=19, col=colors)

```
```{r}
# Create a data.frame for ggplot
df <- as.data.frame(wisc.pr$x)
df$diagnosis <- diagnosis  # Add diagnosis as a column in the data frame

# Load the ggplot2 package
library(ggplot2)

# Make a scatter plot colored by diagnosis
ggplot(df) + 
  aes(x = PC1, y = PC2, col = diagnosis) +  # Map PC1 and PC2 to axes, color by diagnosis
  geom_point() +  # Add points to the plot
  labs(x = "PC1", y = "PC2", title = "PCA Plot: PC1 vs PC2")  # Add labels and title



```

```{r}
# Calculate variance of each component
pr.var <- wisc.pr$sdev^2
head(pr.var)
```
```{r}
# Variance explained by each principal component: pve
pve <- pr.var / total_variance

# Plot variance explained for each principal component
plot(pve, xlab = "Principal Component", 
     ylab = "Proportion of Variance Explained", 
     ylim = c(0, 1), type = "o")
```
```{r}
# Alternative scree plot of the same data, note data driven y-axis
barplot(pve, ylab = "Precent of Variance Explained",
     names.arg=paste0("PC",1:length(pve)), las=2, axes = FALSE)
axis(2, at=pve, labels=round(pve,2)*100 )
```
```{r}
## ggplot based graph
#install.packages("factoextra")
library(factoextra)
fviz_eig(wisc.pr, addlabels = TRUE)

```

Q9. For the first principal component, what is the component of the loading vector (i.e. wisc.pr$rotation[,1]) for the feature concave.points_mean? This tells us how much this original feature contributes to the first PC.

```{r}
# Extract the loading for the first principal component (PC1) for 'concave.points_mean'
loading_concave_points_mean <- wisc.pr$rotation[, 1]

# Print the result
print(loading_concave_points_mean)

```
```{r}
# Scale the wisc.data data using the "scale()" function
data.scaled <- scale(wisc.data)

data.dist <- dist(data.scaled)

wisc.hclust <- hclust(data.dist, method = "complete")
print(wisc.hclust)


```
Q10. Using the plot() and abline() functions, what is the height at which the clustering model has 4 clusters?

```{r}
# Plot hierarchical clustering dendrogram
plot(wisc.hclust, main = "Hierarchical Clustering Dendrogram", 
     xlab = "Observations", ylab = "Height")
```

```{r}
# Cut tree into 4 clusters and find the height
wisc.hclust.clusters <- cutree(wisc.hclust, k = 4)  # Assign observations into 4 clusters
table(wisc.hclust.clusters,diagnosis)
```
Q11. OPTIONAL: Can you find a better cluster vs diagnoses match by cutting into a different number of clusters between 2 and 10? How do you judge the quality of your result in each case?
```{r}
plot(wisc.hclust, main = "Hierarchical Clustering Dendrogram", 
     xlab = "Observations", ylab = "Height")
#height_4_clusters <- max(wisc.hclust$height[table(cluster_cut) == 4]) # Approximate height

# horizontal line at the height where 4 clusters form
#abline(h = height_4_clusters, col = "red", lwd = 3, lty = 2)

# Print the height at which we have 4 clusters
#print(height_4_clusters)
```

Q12. Which method gives your favorite results for the same data.dist dataset? Explain your reasoning.

```{r}
# different hierarchical clustering methods
hc_single <- hclust(data.dist, method = "single")
hc_complete <- hclust(data.dist, method = "complete")
hc_average <- hclust(data.dist, method = "average")
hc_ward <- hclust(data.dist, method = "ward.D2")

# Plot dendrograms side by side for comparison
par(mfrow = c(2, 2))  # Arrange plots in a 2x2 grid
plot(hc_single, main = "Single Linkage", xlab = "", sub = "", col = "blue")
plot(hc_complete, main = "Complete Linkage", xlab = "", sub = "", col = "purple")
plot(hc_average, main = "Average Linkage", xlab = "", sub = "", col = "hotpink")
plot(hc_ward, main = "Ward's Method (D2)", xlab = "", sub = "")

# Reset plotting layout
par(mfrow = c(1, 1))

```
```{r}
grps <- cutree(wisc.hclust, k=2)
table(grps)
```
```{r}
table(grps, diagnosis)

```

```{r}
plot(wisc.pr$x[,1:2], col=grps)

```
```{r}
plot(wisc.pr$x[,1:2], col=diagnosis)

```
```{r}
g <- as.factor(grps)
levels(g)

g <- relevel(g,2)
levels(g)

# Plot using our re-ordered factor 
plot(wisc.pr$x[,1:2], col=g)
```
```{r}
#library(rgl)
#plot3d(wisc.pr$x[,1:3], xlab="PC 1", ylab="PC 2", zlab="PC 3", cex=1.5, size=1, #type="s", col=grps)
```


```{r}
## Use the distance along the first 7 PCs for clustering i.e. wisc.pr$x[, 1:7]
#wisc.pr.hclust <- hclust(wisc.pr.hclust, method="ward.D2")
```

```{r}
# Compute Euclidean distance on the first 7 principal components
data.dist <- dist(wisc.pr$x[, 1:7])  

# Perform hierarchical clustering using Ward's method
wisc.pr.hclust <- hclust(data.dist, method = "ward.D2")

wisc.pr.hclust.clusters <- cutree(wisc.pr.hclust, k=2)


#Q13. How well does the newly created model with four clusters separate out the two diagnoses?
# Compare to actual diagnoses
table(wisc.pr.hclust.clusters, diagnosis)
table(wisc.hclust.clusters, diagnosis)
# Plot the dendrogram
plot(wisc.pr.hclust, main = "Hierarchical Clustering (Ward.D2)", 
     xlab = "Observations", ylab = "Height")

# 3D PCA visualization using rgl
#plot3d(wisc.pr$x[, 1:3], col = diagnosis, size = 5)

# Make it interactive in an HTML report
#rglwidget(width = 400, height = 400)

```
Q14. How well do the hierarchical clustering models you created in previous sections (i.e. before PCA) do in terms of separating the diagnoses? Again, use the table() function to compare the output of each model (wisc.km$cluster and wisc.hclust.clusters) with the vector containing the actual diagnoses.
```{r}
# Compare hierarchical clustering results with actual diagnosis
table(wisc.hclust.clusters, diagnosis)

```





Q15. OPTIONAL: Which of your analysis procedures resulted in a clustering model with the best specificity? How about sensitivity?

```{r}
#url <- "new_samples.csv"
url <- "https://tinyurl.com/new-samples-CSV"
new <- read.csv(url)
npc <- predict(wisc.pr, newdata=new)
npc

plot(wisc.pr$x[,1:2], col=g)
points(npc[,1], npc[,2], col="blue", pch=16, cex=3)
text(npc[,1], npc[,2], c(1,2), col="white")
```
Q16. Which of these new patients should we prioritize for follow up based on your results?




