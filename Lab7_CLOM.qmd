---
title: "Class Lab 7"
author: "Celia L Ochoa Medina"
format: pdf
---

Q1. how many rows and columns are in the new data frame named x? What R functions could you use to answer this question.
> Ans. 17 rows/13 col. to get ans use dim() in R

```{r}
url <- "https://tinyurl.com/UK-foods"
x <- read.csv(url)

## Complete the following code to find out how many rows and columns are in x?
dim(x)
## Complete the following code to find out how many rows and columns are in x?
head(x)
tail(x)

```
```{r}
# Note how the minus indexing works
rownames(x) <- x[,1]
x <- x[,-1]
head(x)
```


Q2. Which approach to solving the ‘row-names problem’ mentioned above do you prefer and why? Is one approach more robust than another under certain circumstances?
> if you run x<-x[,-1] multiple times it creates a problem because it is re-initializing the first input by 1 unit; therefore, adjusting the dimensions of the data. thus I prefered first checking the dimensions and doing a visual check. then using the -1 shift to make sure I captured all data correctly. 


```{r}
barplot(as.matrix(x), beside=T, col=rainbow(nrow(x)))

barplot(as.matrix(x), beside=F, col=rainbow(nrow(x)))

```
Q3: Changing what optional argument in the above barplot() function results in the following plot?
> Ans. beside=T to beside=F

Q5: Generating all pairwise plots may help somewhat. Can you make sense of the following code and resulting figure? What does it mean if a given point lies on the diagonal for a given plot?
> There is some correlation for dots that fall on the diagonal of the the lines. They must share some group or behavior. 



```{r}
pairs(x, col=rainbow(10), pch=16)

```
>Q6. What is the main differences between N. Ireland and the other countries of the UK in terms of this data-set?

> It is difficult to determine alone but it seems to share the purple and pink data set the most 


```{r}
# Use the prcomp() PCA function 
pca <- prcomp(t(x))
summary(pca)
```
>Q7. Complete the code below to generate a plot of PC1 vs PC2. The second line adds text labels over the data points.

> Q8. Customize your plot so that the colors of the country names match the colors in our UK and Ireland map and table at start of this document.

>Ans. see code below

```{r}
# Plot PC1 vs PC2
colors <-rainbow(nrow(pca$x))

plot(pca$x[,1], pca$x[,2], xlab="PC1", ylab="PC2", xlim=c(-270,500),
      main="PCA Plot: PC1 vs PC2", pch=19, col=colors)

text(pca$x[,1], pca$x[,2], colnames(x), pos=4, cex=1, col=colors)

#text(pca$x[,1], pca$x[,2], labels=rownames(pca$x), pos=4, cex=1, col = "green")

```
```{r}
v <- round( pca$sdev^2/sum(pca$sdev^2) * 100 )
v

## or the second row here...
z <- summary(pca)
z$importance
```

```{r}
barplot(v, xlab="Principal Component", ylab="Percent Variation")

```
```{r}
## Lets focus on PC1 as it accounts for > 90% of variance 
par(mar=c(10, 3, 0.35, 0))
barplot( pca$rotation[,1], las=2 )

```

```{r}
#now let's look at PCA2
par(mar=c(10, 3, 0.35, 0))
barplot( pca$rotation[,2], las=2 )

```
>Q9. What two food groups feature prominantely and what does PC2 mainly tell us?
> Ans. soft drinks and alcholic drinks given that they have a positive trend on the bar graph. PCA 2 captures the second greatest variance from the 4 groups, with the closest variance to PCA1.


```{r}
library(ggplot2)

df <- as.data.frame(pca$x)
df_lab <- tibble::rownames_to_column(df, "Country")

# Our first basic plot
ggplot(df_lab) + 
  aes(PC1, PC2, col=Country) + 
  geom_point()
```
```{r}
ggplot(df_lab) + 
  aes(PC1, PC2, col=Country, label=Country) + 
  geom_hline(yintercept = 0, col="gray") +
  geom_vline(xintercept = 0, col="gray") +
  geom_point(show.legend = FALSE) +
  geom_label(hjust=1, nudge_x = -10, show.legend = FALSE) +
  expand_limits(x = c(-300,500)) +
  xlab("PC1 (67.4%)") +
  ylab("PC2 (28%)") +
  theme_bw()
```
```{r}
ld <- as.data.frame(pca$rotation)
ld_lab <- tibble::rownames_to_column(ld, "Food")

ggplot(ld_lab) +
  aes(PC1, Food) +
  geom_col() 
```

```{r}
ggplot(ld_lab) +
  aes(PC1, reorder(Food, PC1), bg=PC1) +
  geom_col() + 
  xlab("PC1 Loadings/Contributions") +
  ylab("Food Group") +
  scale_fill_gradient2(low="purple", mid="gray", high="darkgreen", guide=NULL) +
  theme_bw()
```
```{r}
## The inbuilt biplot() can be useful for small datasets 
biplot(pca)
```
>Part 2: PCA of RNA-seq data

```{r} 
url2 <- "https://tinyurl.com/expression-CSV"
rna.data <- read.csv(url2, row.names=1)
head(rna.data)
```
> Q10. How many genes and samples are in this data?
>Ans. 100 genes and 10 samples

```{r}
## Again we have to take the transpose of our data 
pca <- prcomp(t(rna.data), scale=TRUE)
 
## Simple un polished plot of pc1 and pc2
plot(pca$x[,1], pca$x[,2], xlab="PC1", ylab="PC2")
```
```{r}
summary(pca)
plot(pca, main="Quick scree plot")

```

```{r}
## Variance captured per PC 
pca.var <- pca$sdev^2

## Percent variance is often more informative to look at 
pca.var.per <- round(pca.var/sum(pca.var)*100, 1)
pca.var.per
```

```{r}
barplot(pca.var.per, main="Scree Plot", 
        names.arg = paste0("PC", 1:10),
        xlab="Principal Component", ylab="Percent Variation")
```
```{r}
## A vector of colors for wt and ko samples
colvec <- colnames(rna.data)
colvec[grep("wt", colvec)] <- "red"
colvec[grep("ko", colvec)] <- "blue"

plot(pca$x[,1], pca$x[,2], col=colvec, pch=16,
     xlab=paste0("PC1 (", pca.var.per[1], "%)"),
     ylab=paste0("PC2 (", pca.var.per[2], "%)"))

text(pca$x[,1], pca$x[,2], labels = colnames(rna.data), pos=c(rep(4,5), rep(2,5)))
```
```{r}
library(ggplot2)

df <- as.data.frame(pca$x)

# Our first basic plot
ggplot(df) + 
  aes(PC1, PC2) + 
  geom_point()

# Add a 'wt' and 'ko' "condition" column
df$samples <- colnames(rna.data) 
df$condition <- substr(colnames(rna.data),1,2)

p <- ggplot(df) + 
        aes(PC1, PC2, label=samples, col=condition) + 
        geom_label(show.legend = FALSE)
p

p + labs(title="PCA of RNASeq Data",
       subtitle = "PC1 clealy seperates wild-type from knock-out samples",
       x=paste0("PC1 (", pca.var.per[1], "%)"),
       y=paste0("PC2 (", pca.var.per[2], "%)"),
       caption="Class example data") +
     theme_bw()

```

```{r}
loading_scores <- pca$rotation[,1]

## Find the top 10 measurements (genes) that contribute
## most to PC1 in either direction (+ or -)
gene_scores <- abs(loading_scores) 
gene_score_ranked <- sort(gene_scores, decreasing=TRUE)

## show the names of the top 10 genes
top_10_genes <- names(gene_score_ranked[1:10])
top_10_genes 
```

