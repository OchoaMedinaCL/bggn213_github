---
title: "AF2_HIV_14Feb25"
author: "Celia L Ochoa Medina"
format: html
Topic: "12: Structure prediction with AlphaFold2 (Structural Bioinformatics pt2.)"
---
---

format: 
  pdf: 
    documentclass: article
    number-sections: true
    toc: true
---


Here we demonstrate how to analyze and make sense of the models from AlphaFold. 
Here we begin by reading all the model PDB files
```{r}

library(bio3d)
library(BiocManager)

```
```{r}

library(httr)

url <- "https://tinyurl.com/newviewngl"
response <- GET(url)
source(url)
# Check the status code (200 means success)
status_code(response)

# View the content of the webpage
content(response, "text")


library(NGLVieweR)
```

```{r}

# Change this for YOUR results dir name
results_dir <- "~/Desktop/Winter_2025/Bioinformatics/Lab/HIV_monomer"
results_dimer <- "~/Desktop/Winter_2025/Bioinformatics/Lab/HIV_monomer_vs_dimer/HIV_monomer_vs_dimer_2f72e_0"

#checking monomer
# File names for all PDB models
pdb_files <- list.files(path=results_dir,
                        pattern="*.pdb",
                        full.names = TRUE)


# File names for all PDB models
pdb_files <- list.files(path=results_dimer,
                        pattern="*.pdb",
                        full.names = TRUE)




# Print our PDB file names
basename(pdb_files)


```
#Align and superpose
```{r}
pdbs <- pdbaln(pdb_files, fit=TRUE, exefile="msa")
```
```{r}
rd <- rmsd(pdbs, fit = T)
mean(rd)
range(rd)
```
```{r}
library(pheatmap)

colnames(rd) <- paste0("m",1:5)
rownames(rd) <- paste0("m",1:5)
pheatmap(rd)
```
```{r}
pc <- pca(pdbs)
plot(pc)
```
```{r}
# Read a reference PDB structure
pdb <- read.pdb("1hsg")
```



```{r}
plotb3(pdbs$b[1,], typ="l", lwd=2, sse=pdb)
points(pdbs$b[2,], typ="l", col="red")
points(pdbs$b[3,], typ="l", col="blue")
points(pdbs$b[4,], typ="l", col="darkgreen")
points(pdbs$b[5,], typ="l", col="orange")
abline(v=100, col="gray")
```
```{r}
core <- core.find(pdbs)

core.inds <- print(core, vol=0.5)
```

```{r}
xyz <- pdbfit(pdbs, core.inds, outpath="corefit_structures")
```

```{r}
rf <- rmsf(xyz)

plotb3(rf, sse=pdb)
abline(v=100, col="gray", ylab="RMSF")
```
```{r}
library(jsonlite)

# Listing of all PAE JSON files
pae_files <- list.files(path=results_dimer,
                        pattern=".*model.*\\.json",
                        full.names = TRUE)
```
```{r}
pae1 <- read_json(pae_files[1],simplifyVector = TRUE)
pae2 <- read_json(pae_files[1],simplifyVector = TRUE)
pae5 <- read_json(pae_files[5],simplifyVector = TRUE)

attributes(pae1)
```
```{r}
# Per-residue pLDDT scores 
#  same as B-factor of PDB..
head(pae1$plddt) 
```
```{r}
pae1$max_pae
pae2$max_pae
pae5$max_pae

```
```{r}
plot.dmat(pae1$pae, 
          xlab="Residue Position (i)",
          ylab="Residue Position (j)")
```
```{r}
plot.dmat(pae5$pae, 
          xlab="Residue Position (i)",
          ylab="Residue Position (j)",
          grid.col = "black",
          zlim=c(0,30))
```

```{r}
plot.dmat(pae1$pae, 
          xlab="Residue Position (i)",
          ylab="Residue Position (j)",
          grid.col = "black",
          zlim=c(0,30))
```
```{r}
aln_file <- list.files(path=results_dimer,
                       pattern=".a3m$",
                        full.names = TRUE)
aln_file
```
```{r}
aln <- read.fasta(aln_file[1], to.upper = TRUE)
```
```{r}
dim(aln$ali)
```


```{r}
sim <- conserv(aln)
```
```{r}
#for monomer
plotb3(sim[1:99], sse=trim.pdb(pdb, chain="A"),
       ylab="Conservation Score")


```


```{r}
con <- consensus(aln, cutoff = 0.9)
con$seq
```
```{r}
#for monomer
m1.pdb <- read.pdb(pdb_files[1])
#occ <- vec2resno(c(sim[1:99]), m1.pdb$atom$resno)
#write.pdb(m1.pdb, o=occ, file="m1_conserv.pdb")

#for monomer v. dimer
length(sim[1:99])  # Should be 99
length(m1.pdb$atom$resno)  # Compare with expected length
length(unique(m1.pdb$atom$resno))

unique_resno <- unique(m1.pdb$atom$resno)
length(unique_resno)  # Should match the length of `sim`

#vec2resno(sim, unique_resno)

```


```{r}
length(m1.pdb$atom$resno)
```


```{r}
class(pdb)
unique(pdb$atom$resno)
sel <- atom.select(pdb, resno = 25:28)
print(sel)


```
```{r}
view.pdb(pdb, backgroundColor = "palevioletred", 
         highlight = atom.select(pdb, resno = 25:28), 
         highlight.style = "spacefill")

```






