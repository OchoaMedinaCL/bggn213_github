---
title: "Class 5: Data Viz with ggplot"
author: "Celia L Ochoa Medina"
format: html
---

R has tones of different graphic systems. These include **"base R"** and add on packages like **ggplot2**

```{r}
head(cars)
plot(cars)
```

First to use the ggplot I need to install the package. For this I use the 'install.packages()' function 

>I don't want to run "install.packages()" in my quarto document as this would re-install the package everytime I render the document. 

The main function in the ggplot2 package is 'ggplot2()' 
Before I can use it, I must load it into R script using library() function 
```{r}

library(ggplot2)
ggplot(cars)
```


 There are at least 3 things that every ggplot needs: 
  - the **data** (the dataset I want to plot)
  - the **aes**thetics (how the data maps to my plot)
  - the **geoms** or geometries (the type of plot)
```{r}
p<- ggplot(cars) +
  aes(x = speed, y = dist) + geom_point() + geom_smooth(method="lm")

```



```{r}
p + labs(title = "my nice GGPLOT", xlab = "Spped(MPH)") + theme_bw()
```

### A RNAseq plot with more aes() values 
```{r}
url <- "https://bioboot.github.io/bimm143_S20/class-material/up_down_expression.txt"


#Q. Use the nrow() function to find out how many genes are in this #dataset. What is your answer? 
#ANS = 5196

genes <- read.delim(url)
head(genes)
5196
```
Q. Use the colnames() function and the ncol() function on the genes data frame to find out what the column names are (we will need these later) and how many columns there are. How many columns did you find? 

Q. Use the table() function on the State column of this data.frame to find out how many ‘up’ regulated genes there are. What is your answer?

#ANS = 127

```{r}
sum(genes$State == "up")

```


Q. Using your values above and 2 significant figures. What fraction of total genes is up-regulated in this dataset? 
#ANS = 2.44

```{r}
table(genes$State)/nrow(genes)*100
```
```{R}
g <-ggplot(genes) + aes(x = Condition1, y = Condition2, col = State) + geom_point()

g + scale_colour_manual( values=c("blue","gray","red") ) + labs(title = "Gene Expression Changes Upon Drug Treatment")

```

# File location online

```{r}
url <- "https://raw.githubusercontent.com/jennybc/gapminder/master/inst/extdata/gapminder.tsv"
gapminder <- read.delim(url)
```
# install.packages("dplyr")  ## un-comment to install if needed

```{r}
library(dplyr)
```

#how many unique countries are there in the data set?
```{r}
gapminder_2007 <- gapminder %>% filter(year==2007)

length(unique(gapminder$country))
```
# how many years does the dataset cover?

```{r}
length(unique(gapminder$year))
```

```{r}
ggplot(gapminder) +
  aes(x= gdpPercap, y= lifeExp, col = continent) +
  geom_point(alpha = 0.3) +
  facet_wrap(~continent)
```

##use patchwork

```{r}
library(patchwork)
```


# Setup some example plots 

```{r}
p1 <- ggplot(mtcars) + geom_point(aes(mpg, disp))
p2 <- ggplot(mtcars) + geom_boxplot(aes(gear, disp, group = gear))
p3 <- ggplot(mtcars) + geom_smooth(aes(disp, qsec))
p4 <- ggplot(mtcars) + geom_bar(aes(carb))
```

# Use patchwork to combine them here:

```{r}
(p1 | p2 | p3) / p4
```
```{r}
library(gapminder)
library(gifski)
library(gganimate)

# Setup nice regular ggplot of the gapminder data
ggplot(gapminder, aes(gdpPercap, lifeExp, size = pop, colour = country)) +
  geom_point(alpha = 0.7, show.legend = FALSE) +
  scale_colour_manual(values = country_colors) +
  scale_size(range = c(2, 12)) +
  scale_x_log10() +
  # Facet by continent
  facet_wrap(~continent) +
  # Here comes the gganimate specific bits
  labs(title = 'Year: {frame_time}', x = 'GDP per capita', y = 'life expectancy') +
  transition_time(year) +
  shadow_wake(wake_length = 0.1, alpha = FALSE)
```


